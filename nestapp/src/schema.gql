# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AuthLoginInput {
  email: String!
  password: String!
}

input CreateLocationInput {
  country: String
  lat: Float!
  lon: Float!
  name: String!
  state: String
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
}

type CurrentWeather {
  current: JSON!
  dt: Int!
  id: Int!
  weather: Weather
}

type DailyWeather {
  daily: JSON!
  dt: Int!
  id: Int!
  weather: Weather
}

input FindOneByFetchedObjInput {
  country: String
  lat: Float!
  lon: Float!
  name: String!
  state: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Location {
  country: String
  id: Int!
  lat: Float!
  lon: Float!
  name: String!
  state: String
  users: [User]!
  weather: Weather
  weatherId: Int
}

type Mutation {
  createLocation(locationInput: CreateLocationInput!, usersId: Int!): Location!
  createUser(createUserInput: CreateUserInput!): User!
  login(authLoginInput: AuthLoginInput!): StatusOutput!
  logout: StatusOutput!
  refreshToken: StatusOutput!
  removeLocation(locationsId: Int!, usersId: Int!): Location!
  removeUser(id: Int!): User!
}

type Query {
  findById(id: Float!): User!
  getCurrentUser: User!
  getListOfPlaces(quantity: Int!): [Location!]!
  getWeather(id: Int!): Weather!
  locationByCoordinates(coordinates: FindOneByFetchedObjInput!): Location!
  locationById(id: Int!): Location!
  locations: [Location!]!
  user(email: String!): User!
  userUnsafe(email: String!): UserWithPassword!
  users: [User!]!
}

type StatusOutput {
  status: Boolean!
}

type Subscription {
  locationAdded(usersId: Int!): Location!
  locationRemoved(usersId: Int!): Location!
  weatherUpdated(weatherId: Int!): Weather!
}

type User {
  email: String!
  id: Int!
  locations: [Location]!
  name: String!
}

type UserWithPassword {
  email: String!
  id: Int!
  locations: [Location]!
  name: String!
  password: String!
}

type Weather {
  current: CurrentWeather
  currentId: Int!
  days: [DailyWeather!]
  id: Int!
  locations: Location
}